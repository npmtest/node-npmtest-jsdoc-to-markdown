{"/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/test.js":"/* istanbul instrument in package npmtest_jsdoc_to_markdown */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/lib.npmtest_jsdoc_to_markdown.js":"/* istanbul instrument in package npmtest_jsdoc_to_markdown */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsdoc_to_markdown = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsdoc_to_markdown = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsdoc-to-markdown && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsdoc_to_markdown */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsdoc_to_markdown\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsdoc_to_markdown.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsdoc_to_markdown.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsdoc_to_markdown.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsdoc_to_markdown.__dirname + '/lib.npmtest_jsdoc_to_markdown.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/node_modules/jsdoc-to-markdown/lib/jsdoc-to-markdown.js":"'use strict'\nconst stats = require('jsdoc2md-stats')\nconst jsdocApi = require('jsdoc-api')\nconst dmd = require('dmd')\nconst DmdOptions = require('./dmd-options')\nconst JsdocOptions = require('./jsdoc-options')\n\n/**\n * @module jsdoc-to-markdown\n * @example\n * const jsdoc2md = require('jsdoc-to-markdown')\n */\n\n/**\n * @alias module:jsdoc-to-markdown\n * @typicalname jsdoc2md\n*/\nclass JsdocToMarkdown {\n  /**\n   * Returns markdown documentation from jsdoc-annoted source code.\n   *\n   * @param [options] {object} - Accepts all {@link module:jsdoc-to-markdown#getJsdocData} options plus the following:\n   * @param [options.data] {object[]} - Raw template data to use. Useful when you already have template data, obtained from `.getTemplateData`. Either `files`, `source` or `data` must be supplied.\n   * @param [options.template] {string} - The template the supplied documentation will be rendered into. Use the default or supply your own template for full control over the output.\n   * @param [options.heading-depth] {number} - The initial heading depth. For example, with a value of `2` the top-level markdown headings look like `\"## The heading\"`.\n   * @param [options.example-lang] {string} - Specifies the default language used in @example blocks (for [syntax-highlighting](https://help.github.com/articles/github-flavored-markdown/#syntax-highlighting) purposes). In gfm mode, each @example is wrapped in a fenced-code block. Example usage: `--example-lang js`. Use the special value `none` for no specific language. While using this option, you can override the supplied language for any @example by specifying the `@lang` subtag, e.g `@example @lang hbs`. Specifying `@example @lang off` will disable code blocks for that example.\n   * @param [options.plugin] {string|string[]} - Use an installed package containing helper and/or partial overrides.\n   * @param [options.helper] {string|string[]} - handlebars helper files to override or extend the default set.\n   * @param [options.partial] {string|string[]} - handlebars partial files to override or extend the default set.\n   * @param [options.name-format] {string} - Format identifier names in the [code](http://daringfireball.net/projects/markdown/syntax#code) style, (i.e. format using backticks or `<code></code>`).\n   * @param [options.no-gfm] {boolean} - By default, dmd generates github-flavoured markdown. Not all markdown parsers render gfm correctly. If your generated docs look incorrect on sites other than Github (e.g. npmjs.org) try enabling this option to disable Github-specific syntax.\n   * @param [options.separators] {boolean} - Put `<hr>` breaks between identifiers. Improves readability on bulky docs.\n   * @param [options.module-index-format] {string} - none, grouped, table, dl.\n   * @param [options.global-index-format] {} - none, grouped, table, dl.\n   * @param [options.param-list-format] {} - Two options to render parameter lists: 'list' or 'table' (default). Table format works well in most cases but switch to list if things begin to look crowded / squashed.\n   * @param [options.property-list-format] {} - list, table.\n   * @param [options.member-index-format] {} - grouped, list\n   * @return {Promise}\n   * @fulfil {string} - the rendered docs\n   * @category async\n   * @example\n   * Pass in filepaths (`**` glob matching supported) of javascript source files:\n   * ```js\n   * > jsdoc2md.render({ files: 'lib/*.js' }).then(console.log)\n   * ```\n   */\n  render (options) {\n    options = options || {}\n    const dmdOptions = new DmdOptions(options)\n    if (options.data) {\n      return dmd.async(options.data, dmdOptions)\n    } else {\n      return this.getTemplateData(options)\n        .then(templateData => dmd.async(templateData, dmdOptions))\n    }\n  }\n\n  /**\n   * Sync version of {@link module:jsdoc-to-markdown#render}.\n   *\n   * @param [options] {object} - Identical options to {@link module:jsdoc-to-markdown#render}.\n   * @return {string}\n   * @engine nodejs >= 0.12\n   * @category sync\n   * @example\n   * const docs = jsdoc2md.renderSync({ files: 'lib/*.js' })\n   */\n  renderSync (options) {\n    options = options || {}\n    const dmdOptions = new DmdOptions(options)\n    if (options.data) {\n      return dmd(options.data, dmdOptions)\n    } else {\n      return dmd(this.getTemplateDataSync(options), dmdOptions)\n    }\n  }\n\n  /**\n   * Returns the template data (jsdoc-parse output) which is fed into the output template (dmd).\n   *\n   * @param [options] {object} - Identical options to {@link module:jsdoc-to-markdown#getJsdocData}.\n   * @return {Promise}\n   * @fulfil {object[]} - the json data\n   * @category async\n   */\n  getTemplateData (options) {\n    options = options || {}\n    const jsdocParse = require('jsdoc-parse')\n    return this.getJsdocData(options)\n      .then(jsdocParse)\n  }\n\n  /**\n   * Sync version of {@link module:jsdoc-to-markdown#getTemplateData}.\n   *\n   * @param [options] {object} - Identical options to {@link module:jsdoc-to-markdown#getJsdocData}.\n   * @return {object[]}\n   * @category sync\n   */\n  getTemplateDataSync (options) {\n    options = options || {}\n    const jsdocParse = require('jsdoc-parse')\n    const jsdocData = this.getJsdocDataSync(options)\n    return jsdocParse(jsdocData, options)\n  }\n\n  /**\n   * Returns raw data direct from the underlying [jsdoc3](https://github.com/jsdoc3/jsdoc).\n   *\n   * @param [options] {object} - the options\n   * @param [options.no-cache] {boolean} - By default results are cached to speed up repeat invocations. Set to true to disable this.\n   * @param [options.files] {string|string[]} - One or more filenames to process. Accepts globs (e.g. `*.js`). Either `files`, `source` or `data` must be supplied.\n   * @param [options.source] {string} - A string containing source code to process. Either `files`, `source` or `data` must be supplied.\n   * @param [options.configure] {string} - The path to the [jsdoc configuration file](http://usejsdoc.org/about-configuring-jsdoc.html). Default: path/to/jsdoc/conf.json.\n   * @param [options.html] {boolean} - Enable experimental documentation of `.html` files.\n   * @return {Promise}\n   * @fulfil {object[]}\n   * @category async\n   */\n  getJsdocData (options) {\n    const jsdocOptions = new JsdocOptions(options)\n    return jsdocApi.explain(jsdocOptions)\n  }\n\n  /**\n   * Sync version of {@link module:jsdoc-to-markdown#getJsdocData}.\n   *\n   * @param [options] {object} - Identical options to {@link module:jsdoc-to-markdown#getJsdocData}.\n   * @return {object[]}\n   * @category sync\n   */\n  getJsdocDataSync (options) {\n    const jsdocOptions = new JsdocOptions(options)\n    return jsdocApi.explainSync(jsdocOptions)\n  }\n\n  /**\n   * By default, the output of each invocation of the main generation methods (`render`, `getTemplateData` etc) is stored in the cache (your system's [temporary directory](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_tmpdir)). Future jsdoc2md invocations with the same input options and source code will return the output immediately from cache, making the tool much faster/cheaper. If the input options or source code changes, fresh output will be generated. This method clears the cache, which you should never need to do unless the cache is failing for some reason. On Mac OSX, the system tmpdir clears itself every few days meaning your jsdoc2md cache will also be routinely cleared.\n   * @returns {Promise}\n   * @category async\n   */\n  clear () {\n    return jsdocApi.cache.clear().then(() => dmd.cache.clear())\n  }\n\n  /**\n   * Returns all [jsdoc namepaths](http://usejsdoc.org/about-namepaths.html) found in the supplied source code.\n   * @param {object} - options to pass to {@link module:jsdoc-to-markdown#getTemplateData}\n   * @returns {object}\n   * @category async\n   */\n  getNamepaths (options) {\n    return this.getTemplateData(options)\n      .then(data => {\n        const namepaths = {}\n        const kinds = [\n          'module', 'class', 'constructor', 'mixin', 'member',\n          'namespace', 'constant', 'function', 'event', 'typedef', 'external'\n        ]\n        kinds.forEach(kind => {\n          namepaths[kind] = data\n            .filter(identifier => {\n              return identifier.kind === kind\n            })\n            .map(identifier => identifier.longname)\n        })\n        return namepaths\n      })\n  }\n}\n\nmodule.exports = new (stats(JsdocToMarkdown, require('../package').version))()\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/node_modules/jsdoc-to-markdown/lib/dmd-options.js":"'use strict'\n\n/**\n * @typicalname options\n */\nclass DmdOptions {\n  constructor (options) {\n    Object.assign(this, options)\n    this.noCache = options['no-cache']\n    delete this['no-cache']\n  }\n}\n\nmodule.exports = DmdOptions\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/node_modules/jsdoc-to-markdown/lib/jsdoc-options.js":"'use strict'\n\nclass JsdocOptions {\n  constructor (options) {\n    Object.assign(this, options)\n    this.cache = !options['no-cache']\n    delete this['no-cache']\n  }\n}\n\nmodule.exports = JsdocOptions\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/node_modules/jsdoc-to-markdown/bin/cli.js":"#!/usr/bin/env node\n'use strict'\nconst tool = require('command-line-tool')\nconst version = require('../package').version\n\nconst cli = parseCommandLine()\nlet options = cli.options._all\noptions = loadStoredConfig(options)\n\n/* jsdoc2md --help */\nif (options.help) {\n  tool.printOutput(cli.usage)\n\n/* jsdoc2md --version */\n} else if (options.version) {\n  tool.printOutput(version)\n\n/* jsdoc2md --clear */\n} else if (options.clear) {\n  const jsdoc2md = require('../')\n  jsdoc2md._interface = 'cli'\n  jsdoc2md.clear().catch(handleError)\n} else {\n  const jsdoc2md = require('../')\n  jsdoc2md._interface = 'cli'\n\n  /* jsdoc2md --config */\n  if (options.config) {\n    const omit = require('lodash.omit')\n    tool.stop(JSON.stringify(omit(options, 'config'), null, '  '))\n  }\n\n  /* input files (jsdoc-options) required from here */\n  /* input validation */\n  try {\n    const assert = require('assert')\n    options.files = options.files || []\n    assert.ok(options.files.length || options.source, 'Must supply either --files or --source')\n  } catch (err) {\n    tool.printOutput(cli.usage)\n    handleError(err)\n  }\n\n  /* jsdoc2md --json */\n  if (options.json) {\n    jsdoc2md.getTemplateData(options)\n      .then(function (json) {\n        tool.printOutput(JSON.stringify(json, null, '  '))\n      })\n      .catch(handleError)\n\n  /* jsdoc2md --jsdoc */\n  } else if (options.jsdoc) {\n    jsdoc2md\n      .getJsdocData(options)\n      .then(function (json) {\n        tool.printOutput(JSON.stringify(json, null, '  '))\n      })\n      .catch(handleError)\n\n  /* jsdoc2md --namepaths */\n  } else if (options.namepaths) {\n    jsdoc2md\n      .getNamepaths(options)\n      .then(function (namepaths) {\n        tool.printOutput(JSON.stringify(namepaths, null, '  '))\n      })\n      .catch(handleError)\n\n  /* jsdoc2md [<options>] --src <files> */\n  } else {\n    const fs = require('fs')\n    if (options.template) options.template = fs.readFileSync(options.template, 'utf8')\n\n    jsdoc2md\n      .render(options)\n      .then(output => {\n        process.stdout.write(output)\n        process.exit(0)\n      })\n      .catch(handleError)\n  }\n}\n\nfunction loadStoredConfig (options) {\n  const loadConfig = require('config-master')\n  const jsdoc2mdConfig = loadConfig('jsdoc2md')\n  return Object.assign(jsdoc2mdConfig, options)\n}\n\nfunction parseCommandLine () {\n  const cliData = require('../lib/cli-data')\n  try {\n    return tool.getCli(cliData.definitions, cliData.usageSections)\n  } catch (err) {\n    handleError(err)\n  }\n}\n\nfunction handleError (err) {\n  tool.halt(err.toString())\n}\n","/home/travis/build/npmtest/node-npmtest-jsdoc-to-markdown/node_modules/jsdoc-to-markdown/lib/cli-data.js":"'use strict'\n\n/* generation options */\nlet jsdocDefinitions = [\n  {\n    name: 'files',\n    alias: 'f',\n    type: String,\n    multiple: true,\n    defaultOption: true,\n    description: 'A list of jsdoc explain files (or glob expressions) to parse for documentation. Either this or [bold]{--source} must be supplied.',\n    typeLabel: '[underline]{file} ...'\n  },\n  {\n    name: 'source',\n    type: String,\n    description: 'A string containing source code to parse for documentation. Either this or [bold]{--files} must be supplied.'\n  },\n  {\n    name: 'configure',\n    alias: 'c',\n    type: String,\n    typeLabel: '[underline]{file}',\n    description: 'Path to a jsdoc configuration file, passed directly to `jsdoc -c`.'\n  },\n  {\n    name: 'html',\n    type: Boolean,\n    description: 'Enable experimental parsing of .html files. When specified, any configuration supplied via [bold]{--configure} is ignored.'\n  },\n  {\n    name: 'namepaths',\n    type: Boolean,\n    description: 'Print namepaths.'\n  }\n]\n\nlet jsdoc2mdDefinitions = [\n  {\n    name: 'help',\n    description: 'Print usage information',\n    alias: 'h',\n    type: Boolean\n  },\n  {\n    name: 'config',\n    description: 'Print all options supplied (from command line, `.jsdoc2md.json` or `package.json` under the `jsdoc2md` property) and exit. Useful for checking the tool is receiving the correct config.',\n    type: Boolean\n  },\n  {\n    name: 'json',\n    type: Boolean,\n    description: 'Prints the data (jsdoc-parse output) supplied to the template (dmd).'\n  },\n  {\n    name: 'jsdoc',\n    type: Boolean,\n    description: 'Prints the raw jsdoc data.'\n  },\n  { name: 'version', type: Boolean },\n  { name: 'no-usage-stats', type: Boolean },\n  { name: 'send', type: Boolean },\n  {\n    name: 'no-cache',\n    type: Boolean,\n    description: 'By default, repeat invocations against the same input with the same options returns from cache. This option disables that. '\n  },\n  {\n    name: 'clear',\n    type: Boolean,\n    description: 'Clears the cache.'\n  }\n]\n\nconst dmdDefinitions = [\n  {\n    name: 'template',\n    alias: 't',\n    type: String,\n    typeLabel: '<file>',\n    description: 'A custom handlebars template file to insert documentation into. The default template is `{{>main}}`.'\n  },\n  {\n    name: 'private',\n    type: Boolean,\n    description: 'Include identifiers marked [bold]{@private} in the output'\n  },\n  {\n    name: 'heading-depth',\n    type: Number,\n    alias: 'd',\n    description: 'Root markdown heading depth, defaults to 2 ([bold]{##}).'\n  },\n  {\n    name: 'plugin',\n    type: String,\n    typeLabel: '[underline]{module} ...',\n    multiple: true,\n    description: 'Use an installed package containing helper and/or partial overrides.'\n  },\n  {\n    name: 'helper',\n    type: String,\n    typeLabel: '[underline]{module} ...',\n    multiple: true,\n    description: 'Handlebars helper modules to override or extend the default set.'\n  },\n  {\n    name: 'partial',\n    type: String,\n    typeLabel: '[underline]{file} ...',\n    multiple: true,\n    description: 'Handlebars partial files to override or extend the default set.'\n  },\n  {\n    name: 'example-lang',\n    type: String,\n    alias: 'l',\n    description: 'Specifies the default language used in [bold]{@example} blocks (for syntax-highlighting purposes). In the default gfm mode, each [bold]{@example} is wrapped in a fenced-code block. Example usage: [bold]{--example-lang js}. Use the special value [bold]{none} for no specific language. While using this option, you can override the supplied language for any [bold]{@example} by specifying the [bold]{@lang} subtag, e.g [bold]{@example @lang hbs}. Specifying [bold]{@example @lang off} will disable code blocks for that example.'\n  },\n  { name: 'name-format', type: Boolean, description: 'Format identifier names as code' },\n  {\n    name: 'no-gfm',\n    type: Boolean,\n    description: 'By default, dmd generates github-flavoured markdown. Not all markdown parsers render gfm correctly. If your generated docs look incorrect on sites other than Github (e.g. npmjs.org) try enabling this option to disable Github-specific syntax. '\n  },\n  {\n    name: 'separators',\n    type: Boolean,\n    description: 'Put [bold]{<hr>} breaks between identifiers. Improves readability on bulky docs. '\n  },\n  {\n    name: 'module-index-format',\n    type: String,\n    alias: 'm',\n    description: 'When muliple modules are found in the input source code, an index is generated. It can be styled by one of the following options: [bold]{none}, [bold]{grouped}, [bold]{table} or [bold]{dl}.'\n  },\n  {\n    name: 'global-index-format',\n    type: String,\n    alias: 'g',\n    description: 'When muliple global-scope identifiers are found in the input source code, an index is generated. It can be styled by one of the following options: [bold]{none}, [bold]{grouped}, [bold]{table} or [bold]{dl}.'\n  },\n  {\n    name: 'param-list-format',\n    type: String,\n    alias: 'p',\n    description: 'Two options to render [bold]{@param} lists: [bold]{list} or [bold]{table} (default). Table format works well in most cases but switch to [bold]{list} if things begin to look crowded. '\n  },\n  {\n    name: 'property-list-format',\n    type: String,\n    alias: 'r',\n    description: 'Two options to render [bold]{@property} lists: [bold]{list} or [bold]{table} (default).'\n  },\n  {\n    name: 'member-index-format',\n    type: String,\n    description: 'Two options to render member lists: [bold]{list} or [bold]{grouped} (default). The [bold]{list} view is loosely-based on the nodejs docs.'\n  }\n]\n\n/* mix in the jsdoc-parse and dmd options */\nlet definitions = jsdocDefinitions\n  .map(def => {\n    def.group = 'jsdoc'\n    return def\n  })\n  .concat(jsdoc2mdDefinitions.map(def => {\n    def.group = 'jsdoc2md'\n    return def\n  }))\n  .concat(dmdDefinitions.map(function (def) {\n    def.group = 'dmd'\n    return def\n  }))\n\nmodule.exports = {\n  definitions: definitions,\n  usageSections: [\n    {\n      header: 'jsdoc-to-markdown',\n      content: 'Generates markdown documentation from jsdoc-annotated source code.'\n    },\n    {\n      header: 'Synopsis',\n      content: [\n        {\n          cmmd: '$ jsdoc2md <jsdoc-options> [<dmd-options>]'\n        },\n        {\n          cmmd: '$ jsdoc2md <jsdoc-options> [bold]{--jsdoc}'\n        },\n        {\n          cmmd: '$ jsdoc2md <jsdoc-options> [bold]{--json}'\n        },\n        {\n          cmmd: '$ jsdoc2md <jsdoc-options> [bold]{--namepaths}'\n        },\n        {\n          cmmd: '$ jsdoc2md [bold]{--help}'\n        },\n        {\n          cmmd: '$ jsdoc2md [bold]{--config}'\n        }\n      ]\n    },\n    {\n      header: 'General options',\n      content: 'Main options affecting mode. If none of the following are supplied, the tool will generate markdown docs.'\n    },\n    {\n      optionList: jsdoc2mdDefinitions,\n      hide: [ 'no-usage-stats', 'send' ]\n    },\n    {\n      header: 'jsdoc options',\n      content: 'Options regarding the input source code, passed directly to jsdoc.'\n    },\n    {\n      optionList: jsdocDefinitions\n    },\n    {\n      header: 'dmd',\n      content: 'These options affect how the markdown output looks.'\n    },\n    {\n      optionList: definitions,\n      group: 'dmd'\n    },\n    {\n      content: [\n        {\n          col1: 'Project repository:',\n          col2: '[underline]{https://github.com/jsdoc2md/jsdoc-to-markdown}'\n        },\n      ]\n    }\n  ]\n}\n"}